diff --git a/tboot/common/cmdline.c b/tboot/common/cmdline.c
index 7d2624a..b504ee8 100644
--- a/tboot/common/cmdline.c
+++ b/tboot/common/cmdline.c
@@ -1,7 +1,7 @@
 /*
  * cmdline.c: command line parsing fns
  *
- * Copyright (c) 2006-2011, Intel Corporation
+ * Copyright (c) 2006-2012, Intel Corporation
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -79,6 +79,7 @@ static const cmdline_option_t g_tboot_cmdline_options[] = {
     { "pcr_map", "legacy" },         /* legacy|da */
     { "prot_mem",   "nores" },       /* all|nores|type1 */
     { "ehci_handoff", "false" },     /* true|false */
+    { "min_ram", "0" },              /* size in bytes | 0 for no min */
     { NULL, NULL }
 };
 static char g_tboot_param_values[ARRAY_SIZE(g_tboot_cmdline_options)][MAX_VALUE_LEN];
@@ -468,6 +469,18 @@ void get_tboot_ehci_handoff(void)
     g_ehci_handoff = ( strcmp(ehci_handoff_str, "true") == 0 );
 }
 
+extern uint32_t g_min_ram;
+void get_tboot_min_ram(void)
+{
+    const char *min_ram = get_option_val(g_tboot_cmdline_options,
+                                         g_tboot_param_values, "min_ram");
+
+    if ( min_ram == NULL)
+        return;
+
+    g_min_ram = strtoul(min_ram, NULL, 0);
+}
+
 /*
  * linux kernel command line parsing
  */
diff --git a/tboot/common/e820.c b/tboot/common/e820.c
index 72dc488..e97cf0d 100644
--- a/tboot/common/e820.c
+++ b/tboot/common/e820.c
@@ -1,7 +1,7 @@
 /*
  * e820.c: support functions for manipulating the e820 table
  *
- * Copyright (c) 2006-2011, Intel Corporation
+ * Copyright (c) 2006-2012, Intel Corporation
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -47,6 +47,11 @@
 
 prot_mem_t g_prot_mem;
 
+/* minimum size of RAM (type 1) region that cannot be marked as resreved even
+   if it comes after a reserved region; 0 for no minimum (i.e. current
+   behavior) */
+uint32_t g_min_ram = 0;
+
 /*
  * copy of bootloader/BIOS e820 table with adjusted entries
  * this version will replace original in mbi
@@ -273,6 +278,7 @@ static bool is_overlapped(uint64_t base, uint64_t end, uint64_t e820_base,
  */
 bool copy_e820_map(const multiboot_info_t *mbi)
 {
+    get_tboot_min_ram();
     g_nr_map = 0;
 
     if ( mbi->flags & MBI_MEMMAP ) {
@@ -300,7 +306,7 @@ bool copy_e820_map(const multiboot_info_t *mbi)
             printk("Too many e820 entries\n");
             return false;
         }
-e820_reserve_ram(0x60000000ULL, 0x200000ULL);
+        e820_reserve_ram(0x60000000ULL, 0x200000ULL);
     }
     else if ( mbi->flags & MBI_MEMLIMITS ) {
         printk("no e820 map, mem_lower=%x, mem_upper=%x\n",
@@ -597,6 +603,22 @@ bool get_ram_ranges(uint64_t *min_lo_ram, uint64_t *max_lo_ram,
         *min_lo_ram = *min_hi_ram = ~0ULL;
         *max_lo_ram = *max_hi_ram = 0;
         bool found_reserved_region = false;
+        uint64_t last_min_ram_base = 0, last_min_ram_size = 0;
+
+        /*
+         * if g_min_ram > 0, we will never mark a region > g_min_ram in size
+         * as reserved even if it is after a reserved region (effectively
+         * we ignore reserved regions below the last type 1 region
+         * > g_min_ram in size)
+         * so in order to reserve RAM regions above this last region, we need
+         * to find it first so that we can tell when we have passed it
+         */
+        if ( g_min_ram > 0 ) {
+            get_highest_sized_ram(g_min_ram, 0x100000000ULL, &last_min_ram_base,
+                                  &last_min_ram_size);
+            printk("highest min_ram (0x%x) region found: base=0x%Lx, size=0x%Lx\n",
+                   g_min_ram, last_min_ram_base, last_min_ram_size);
+        }
 
         for ( unsigned int i = 0; i < g_nr_map; i++ ) {
             memory_map_t *entry = &g_copy_e820_map[i];
@@ -628,7 +650,7 @@ bool get_ram_ranges(uint64_t *min_lo_ram, uint64_t *max_lo_ram,
                  * VT-d to register errors
                  */
                 if ( (!found_reserved_region && g_prot_mem == nores ) ||
-                     g_prot_mem == type1 ) {
+                     g_prot_mem == type1  || base <= last_min_ram_base ) {
                     if ( base < 0x100000000ULL && base < *min_lo_ram )
                         *min_lo_ram = base;
                     if ( limit <= 0x100000000ULL && limit > *max_lo_ram )
diff --git a/tboot/include/cmdline.h b/tboot/include/cmdline.h
index 801a450..6f5c385 100644
--- a/tboot/include/cmdline.h
+++ b/tboot/include/cmdline.h
@@ -50,6 +50,7 @@ extern bool get_tboot_mwait(void);
 extern bool get_tboot_prefer_da(void);
 extern void get_tboot_prot_mem(void);
 extern void get_tboot_ehci_handoff(void);
+extern void get_tboot_min_ram(void);
 
 /* for parse cmdline of linux kernel, say vga and mem */
 extern void linux_parse_cmdline(const char *cmdline);
