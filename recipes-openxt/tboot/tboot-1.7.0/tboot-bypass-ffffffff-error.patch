diff -Nurp a/tboot/common/cmdline.c b/tboot/common/cmdline.c
--- a/tboot/common/cmdline.c	2012-10-05 08:03:57.000000000 -0400
+++ b/tboot/common/cmdline.c	2012-10-05 09:38:04.000000000 -0400
@@ -80,6 +80,7 @@ static const cmdline_option_t g_tboot_cm
     { "prot_mem",   "nores" },       /* all|nores|type1 */
     { "ehci_handoff", "false" },     /* true|false */
     { "min_ram", "0" },              /* size in bytes | 0 for no min */
+    { "bypass_inv_err", "0" },       /* bypass invalid errors like 0xffffffff | 0 disabled */
     { NULL, NULL }
 };
 static char g_tboot_param_values[ARRAY_SIZE(g_tboot_cmdline_options)][MAX_VALUE_LEN];
@@ -481,6 +482,19 @@ void get_tboot_min_ram(void)
     g_min_ram = strtoul(min_ram, NULL, 0);
 }
 
+extern uint32_t g_bypass_inv_err;
+void get_tboot_bypass_inv_err(void)
+{
+    const char *bypass_inv_err = get_option_val(g_tboot_cmdline_options,
+                                                g_tboot_param_values,
+                                                "bypass_inv_err");
+
+    if ( bypass_inv_err == NULL)
+        return;
+
+    g_bypass_inv_err = strtoul(bypass_inv_err, NULL, 0);
+}
+
 /*
  * linux kernel command line parsing
  */
diff -Nurp a/tboot/include/cmdline.h b/tboot/include/cmdline.h
--- a/tboot/include/cmdline.h	2012-10-05 08:03:57.000000000 -0400
+++ b/tboot/include/cmdline.h	2012-10-05 09:39:14.000000000 -0400
@@ -51,6 +51,7 @@ extern bool get_tboot_prefer_da(void);
 extern void get_tboot_prot_mem(void);
 extern void get_tboot_ehci_handoff(void);
 extern void get_tboot_min_ram(void);
+extern void get_tboot_bypass_inv_err(void);
 
 /* for parse cmdline of linux kernel, say vga and mem */
 extern void linux_parse_cmdline(const char *cmdline);
diff -Nurp a/tboot/txt/errors.c b/tboot/txt/errors.c
--- a/tboot/txt/errors.c	2012-10-05 08:03:57.000000000 -0400
+++ b/tboot/txt/errors.c	2012-10-05 09:58:04.000000000 -0400
@@ -38,10 +38,15 @@
 #include <types.h>
 #include <printk.h>
 #include <tb_error.h>
+#include <cmdline.h>
 #include <txt/txt.h>
 #include <txt/config_regs.h>
 #include <txt/errorcode.h>
 
+/* Workaround for platform bug that leaves TXT.ERRORCODE == 0xffffffff
+ * after every reboot and power cycle. Disabled by default.
+ */
+uint32_t g_bypass_inv_err = 0;
 
 bool is_txt_errorcode_error(void)
 {
@@ -51,6 +56,18 @@ bool is_txt_errorcode_error(void)
     if ( !err.valid )
         return false;
 
+    /* This issue is seen on a number of IVB platforms. The error register
+     * is not properly cleared, even on a full system reset. It instead
+     * contains an invalid error code with all bits sets. This is a work-
+     * around to allow TXT to function when this is detected. When a full
+     * fix is found, this *SHOULD* be removed.
+     */
+    get_tboot_bypass_inv_err();
+    if ( g_bypass_inv_err && err._raw == 0xffffffff ) {
+        printk("Invalid error code 0xFFFFFFFF detected - bypassing, this is a platform bug.\n");
+        return false;
+    }
+
     /* SINIT returns 0xC0000001 for success, which need to treat as no error */
     if ( err.external ) {
         if ( !err.non_acm  && err.acm_type == 1 &&
