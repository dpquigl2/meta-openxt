diff --git a/tboot/common/cmdline.c b/tboot/common/cmdline.c
index 7270c68..71ee99d 100644
--- a/tboot/common/cmdline.c
+++ b/tboot/common/cmdline.c
@@ -382,9 +382,19 @@ static bool parse_serial_param(const char *com)
     if ( *com != ',' )
         goto exit;
     ++com;
-    g_com_port.comc_port = strtoul(com, (char **)&com, 0);
-    if ( g_com_port.comc_port == 0 )
-        return false;
+    if (strncmp(com, "magic", 5) == 0) {
+        g_log_targets |= TBOOT_LOG_OPTION_MAGIC;
+        com += 5;
+    }
+    else if (strncmp(com, "amt", 3) == 0) {
+        g_log_targets |= TBOOT_LOG_OPTION_AMT;
+        com += 3;
+    }
+    else {
+        g_com_port.comc_port = strtoul(com, (char **)&com, 0);
+        if ( g_com_port.comc_port == 0 )
+            return false;
+    }
 
     /* parse irq */
     if ( *com != ',' )
diff --git a/tboot/common/com.c b/tboot/common/com.c
index 8ddba09..0498257 100644
--- a/tboot/common/com.c
+++ b/tboot/common/com.c
@@ -37,11 +37,14 @@
 #include <io.h>
 #include <pci_cfgreg.h>
 #include <com.h>
+#include <pci_regs.h>
 
 #define COMC_TXWAIT	0x40000		/* transmit timeout */
 #define COMC_BPS(x)	(115200 / (x))	/* speed to DLAB divisor */
 #define COMC_DIV2BPS(x)	(115200 / (x))	/* DLAB divisor to speed */
 
+#define UART_CLOCK_HZ   1843200
+
 #define OUTB(add, val)   outb(g_com_port.comc_port + (add), (val))
 #define INB(add)         inb(g_com_port.comc_port + (add))
 
@@ -62,6 +65,68 @@ static void comc_putchar(int c)
         }
 }
 
+static int comc_magic_uart_config(int skip_amt)
+{
+    uint16_t class;
+    uint32_t bar0, len, didvid;
+    int b, d, f;
+
+    // Skanky hack - start at bus 1 to avoid AMT, a plug in card cannot be on bus 1
+    b = !!skip_amt;
+
+    for (; b < 0x100; ++b)
+    {
+        for (d = 0; d < 0x20; ++d)
+        {
+            for (f = 0; f < 0x8; ++f)
+            {
+                class = pcireg_cfgread(b, d, f, PCI_CLASS_DEVICE, 2);
+                if (class != 0x700)
+                    continue;
+
+                bar0 = pcireg_cfgread(b, d, f, PCI_BASE_ADDRESS_0, 4);
+
+                // Not IO
+                if (!(bar0 & 1))
+                    continue;
+
+                pcireg_cfgwrite(b, d, f, PCI_BASE_ADDRESS_0, 0xffffffff, 4);
+                len = pcireg_cfgread(b, d, f, PCI_BASE_ADDRESS_0, 4);
+                pcireg_cfgwrite(b, d, f, PCI_BASE_ADDRESS_0, bar0, 4);
+
+                // Not 8 bytes
+                if ((len & 0xffff) != 0xfff9)
+                    continue;
+
+                g_com_port.comc_port = bar0 & 0xfffe;
+                g_com_port.comc_irq = 0;
+
+                didvid = pcireg_cfgread(b, d, f, 0, 4);
+
+                switch (didvid) {
+                    case 0xc1201415:     //Cards requiring regular clock
+                    case 0x3b678086:
+                        g_com_port.comc_clockhz = UART_CLOCK_HZ;
+                        break;
+                    case 0x950b1415:    // Cards requiring fast clock:
+                        g_com_port.comc_clockhz = 8 * UART_CLOCK_HZ;
+                        break;
+                    default:
+                        g_com_port.comc_clockhz = UART_CLOCK_HZ;
+                        break;
+                }
+
+                return 0;
+            }
+        }
+    }
+
+    if (!skip_amt)
+        return -1;
+
+    return 0;
+}
+
 static void comc_setup(int speed)
 {
     OUTB(com_cfcr, CFCR_DLAB | g_com_port.comc_fmt);
@@ -106,8 +171,10 @@ static void comc_pci_setup(void)
     }
 }               
 
-void comc_init(void)
+void comc_init(int magic, int amt)
 {
+    if (magic)
+        comc_magic_uart_config(!amt);
     comc_pci_setup(); 
     comc_setup(g_com_port.comc_curspeed);
 }
diff --git a/tboot/common/printk.c b/tboot/common/printk.c
index c060854..49e3c28 100644
--- a/tboot/common/printk.c
+++ b/tboot/common/printk.c
@@ -114,7 +114,8 @@ void printk_init(void)
     if ( g_log_targets & TBOOT_LOG_TARGET_MEMORY )
         memlog_init();
     if ( g_log_targets & TBOOT_LOG_TARGET_SERIAL )
-        serial_init();
+        serial_init(!!(g_log_targets & TBOOT_LOG_OPTION_MAGIC),
+                    !!(g_log_targets & TBOOT_LOG_OPTION_AMT));
     if ( g_log_targets & TBOOT_LOG_TARGET_VGA ) {
         vga_init();
         get_tboot_vga_delay(); /* parse vga delay time */
diff --git a/tboot/include/com.h b/tboot/include/com.h
index da69392..9ed51e4 100644
--- a/tboot/include/com.h
+++ b/tboot/include/com.h
@@ -294,7 +294,7 @@ typedef struct __packed {
     bdf_t    comc_pbbdf;     /* PCI bridge bdf */
 } serial_port_t;
 
-extern void comc_init(void);
+extern void comc_init(int magic, int amt);
 extern void comc_puts(const char*, unsigned int);
 
 #endif /* __COM_H__ */
diff --git a/tboot/include/pci_regs.h b/tboot/include/pci_regs.h
index e69de29..3d1f6be 100644
--- a/tboot/include/pci_regs.h
+++ b/tboot/include/pci_regs.h
@@ -0,0 +1,46 @@
+/*
+ * Copyright (c) 2012, Citrix Systems
+ *
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ *   * Redistributions of source code must retain the above copyright
+ *     notice, this list of conditions and the following disclaimer.
+ *   * Redistributions in binary form must reproduce the above
+ *     copyright notice, this list of conditions and the following
+ *     disclaimer in the documentation and/or other materials provided
+ *     with the distribution.
+ *   * Neither the name of Citrix Systems nor the names of its
+ *     contributors may be used to endorse or promote products derived
+ *     from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+ * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+ * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+ * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
+ * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
+ * OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+#ifndef PCI_REGS_H__
+#define	PCI_REGS_H__
+
+#define PCI_VENDOR_ID           0x00
+#define PCI_DEVICE_ID           0x02
+#define PCI_CLASS_REVISION      0x08
+#define PCI_CLASS_DEVICE        0x0a
+
+#define PCI_BASE_ADDRESS_0      0x10
+
+#define PCI_CLASS_USB           0xc03
+
+#endif /* PCI_REGS_H__ */
diff --git a/tboot/include/printk.h b/tboot/include/printk.h
index 17a2f32..ec3e89c 100644
--- a/tboot/include/printk.h
+++ b/tboot/include/printk.h
@@ -48,13 +48,15 @@
 #define TBOOT_LOG_TARGET_VGA    0x01
 #define TBOOT_LOG_TARGET_SERIAL 0x02
 #define TBOOT_LOG_TARGET_MEMORY 0x04
+#define TBOOT_LOG_OPTION_MAGIC  0x08
+#define TBOOT_LOG_OPTION_AMT    0x10
 
 extern uint8_t g_log_level;
 extern uint8_t g_log_targets;
 extern uint8_t g_vga_delay;
 extern serial_port_t g_com_port;
 
-#define serial_init()         comc_init()
+#define serial_init(m, a)     comc_init(m, a)
 #define serial_write(s, n)    comc_puts(s, n)
 
 #define vga_write(s,n)        vga_puts(s, n)
