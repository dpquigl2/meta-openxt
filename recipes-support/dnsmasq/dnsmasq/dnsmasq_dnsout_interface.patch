diff -rupN dnsmasq-2.72-orig/src/dnsmasq.h dnsmasq-2.72/src/dnsmasq.h
--- dnsmasq-2.72-orig/src/dnsmasq.h	2015-03-20 13:22:24.754717644 -0400
+++ dnsmasq-2.72/src/dnsmasq.h	2015-03-20 13:28:15.571732172 -0400
@@ -517,7 +517,7 @@ struct irec {
   union mysockaddr addr;
   struct in_addr netmask; /* only valid for IPv4 */
   int tftp_ok, dhcp_ok, mtu, done, warned, dad, dns_auth, index, multicast_done, found;
-  char *name; 
+  char *name;
   struct irec *next;
 };
 
@@ -924,7 +924,7 @@ extern struct daemon {
   struct cond_domain *cond_domain, *synth_domains;
   char *runfile; 
   char *lease_change_command;
-  struct iname *if_names, *if_addrs, *if_except, *dhcp_except, *auth_peers, *tftp_interfaces;
+  struct iname *if_names, *if_addrs, *if_except, *dhcp_except, *auth_peers, *tftp_interfaces, *dnsout_names;
   struct bogus_addr *bogus_addr;
   struct server *servers;
   struct ipsets *ipsets;
diff -rupN dnsmasq-2.72-orig/src/network.c dnsmasq-2.72/src/network.c
--- dnsmasq-2.72-orig/src/network.c	2015-03-20 13:22:24.752717644 -0400
+++ dnsmasq-2.72/src/network.c	2015-03-20 13:31:52.830741170 -0400
@@ -1108,6 +1108,12 @@ void join_multicast(int dienow)
 int random_sock(int family)
 {
   int fd;
+  struct ifreq ifr;
+  struct iname *ifn;
+
+  memset(&ifr, 0, sizeof (ifr));
+  if ((ifn = daemon->dnsout_names))
+      strncpy(ifr.ifr_name, ifn->name, sizeof (ifr.ifr_name));
 
   if ((fd = socket(family, SOCK_DGRAM, 0)) != -1)
     {
@@ -1146,6 +1152,13 @@ int random_sock(int family)
 #endif
 	      }
 #endif
+	    if (ifr.ifr_name[0])
+	    {
+		    printf("Use interface %s\n", ifr.ifr_name);
+		    if (setsockopt(fd, SOL_SOCKET, SO_BINDTODEVICE,
+					    (void *)&ifr, sizeof (ifr)) < 0)
+			    break;
+	    }
 	    
 	    if (bind(fd, (struct sockaddr *)&addr, sa_len(&addr)) == 0)
 	      return fd;
diff -rupN dnsmasq-2.72-orig/src/option.c dnsmasq-2.72/src/option.c
--- dnsmasq-2.72-orig/src/option.c	2015-03-20 13:22:24.754717644 -0400
+++ dnsmasq-2.72/src/option.c	2015-03-20 13:34:58.638748865 -0400
@@ -147,6 +147,8 @@ struct myoption {
 #define LOPT_LOCAL_SERVICE 335
 #define LOPT_DNSSEC_TIME   336
 #define LOPT_LOOP_DETECT   337
+#define LOPT_DNSOUT_IF 	   338
+
 
 #ifdef HAVE_GETOPT_LONG
 static const struct option opts[] =  
@@ -177,6 +179,7 @@ static const struct myoption opts[] =
     { "domain", 1, 0, 's' },
     { "domain-suffix", 1, 0, 's' },
     { "interface", 1, 0, 'i' },
+    { "dnsout-interface", 1, 0, LOPT_DNSOUT_IF },
     { "listen-address", 1, 0, 'a' },
     { "local-service", 0, 0, LOPT_LOCAL_SERVICE },
     { "bogus-priv", 0, 0, 'b' },
@@ -335,6 +338,7 @@ static struct {
   { 'h', OPT_NO_HOSTS, NULL, gettext_noop("Do NOT load %s file."), HOSTSFILE },
   { 'H', ARG_DUP, "<path>", gettext_noop("Specify a hosts file to be read in addition to %s."), HOSTSFILE },
   { 'i', ARG_DUP, "<interface>", gettext_noop("Specify interface(s) to listen on."), NULL },
+  { LOPT_DNSOUT_IF, ARG_DUP, "dnsout-interface", gettext_noop("Specify which interface(s) to use for dns request."), NULL },
   { 'I', ARG_DUP, "<interface>", gettext_noop("Specify interface(s) NOT to listen on.") , NULL },
   { 'j', ARG_DUP, "set:<tag>,<class>", gettext_noop("Map DHCP user class to tag."), NULL },
   { LOPT_CIRCUIT, ARG_DUP, "set:<tag>,<circuit>", gettext_noop("Map RFC3046 circuit-id to tag."), NULL },
@@ -2071,6 +2075,20 @@ static int one_opt(int option, char *arg
 	break;
       /* fall through */
 
+    case LOPT_DNSOUT_IF: /*--dnsout-interface */
+      do {
+          struct iname *new = opt_malloc(sizeof (struct iname));
+          memset(new, 0, sizeof (*new));
+          comma = split(arg);
+          new->next = daemon->dnsout_names;
+          daemon->dnsout_names = new;
+          /* new->name may be NULL if someone does
+           * "interface=" to disable all interfaces except loop. */
+          new->name = opt_string_alloc(arg);
+          arg = comma;
+      } while (arg);
+      break;
+
     case 'I':  /* --except-interface */
     case '2':  /* --no-dhcp-interface */
       do {
