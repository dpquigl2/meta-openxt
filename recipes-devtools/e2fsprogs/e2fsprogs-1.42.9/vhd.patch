diff -rupN e2fsprogs-1.42.9-orig/aclocal.m4 e2fsprogs-1.42.9/aclocal.m4
--- e2fsprogs-1.42.9-orig/aclocal.m4	2015-03-31 11:35:58.196812361 -0400
+++ e2fsprogs-1.42.9/aclocal.m4	2015-03-31 11:38:43.862819222 -0400
@@ -2650,9 +2650,10 @@ AC_DEFUN([AX_TLS], [
   AC_MSG_RESULT($ac_cv_tls)
 ])
 
-# Excerpted from pkg.m4 - Macros to locate and utilise pkg-config
-#
-# Copyright Â© 2004 Scott James Remnant <scott@netsplit.com>.
+# pkg.m4 - Macros to locate and utilise pkg-config.            -*- Autoconf -*-
+# serial 1 (pkg-config-0.24)
+# 
+# Copyright © 2004 Scott James Remnant <scott@netsplit.com>.
 #
 # This program is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
@@ -2678,22 +2679,134 @@ AC_DEFUN([AX_TLS], [
 AC_DEFUN([PKG_PROG_PKG_CONFIG],
 [m4_pattern_forbid([^_?PKG_[A-Z_]+$])
 m4_pattern_allow([^PKG_CONFIG(_PATH)?$])
-AC_ARG_VAR([PKG_CONFIG], [path to pkg-config utility])dnl
+AC_ARG_VAR([PKG_CONFIG], [path to pkg-config utility])
+AC_ARG_VAR([PKG_CONFIG_PATH], [directories to add to pkg-config's search path])
+AC_ARG_VAR([PKG_CONFIG_LIBDIR], [path overriding pkg-config's built-in search path])
+
 if test "x$ac_cv_env_PKG_CONFIG_set" != "xset"; then
-        AC_PATH_TOOL([PKG_CONFIG], [pkg-config])
+	AC_PATH_TOOL([PKG_CONFIG], [pkg-config])
 fi
 if test -n "$PKG_CONFIG"; then
-        _pkg_min_version=m4_default([$1], [0.9.0])
-        AC_MSG_CHECKING([pkg-config is at least version $_pkg_min_version])
-        if $PKG_CONFIG --atleast-pkgconfig-version $_pkg_min_version; then
-                AC_MSG_RESULT([yes])
-        else
-                AC_MSG_RESULT([no])
-                PKG_CONFIG=""
-        fi
-               
+	_pkg_min_version=m4_default([$1], [0.9.0])
+	AC_MSG_CHECKING([pkg-config is at least version $_pkg_min_version])
+	if $PKG_CONFIG --atleast-pkgconfig-version $_pkg_min_version; then
+		AC_MSG_RESULT([yes])
+	else
+		AC_MSG_RESULT([no])
+		PKG_CONFIG=""
+	fi
 fi[]dnl
 ])# PKG_PROG_PKG_CONFIG
+
+# PKG_CHECK_EXISTS(MODULES, [ACTION-IF-FOUND], [ACTION-IF-NOT-FOUND])
+#
+# Check to see whether a particular set of modules exists.  Similar
+# to PKG_CHECK_MODULES(), but does not set variables or print errors.
+#
+# Please remember that m4 expands AC_REQUIRE([PKG_PROG_PKG_CONFIG])
+# only at the first occurence in configure.ac, so if the first place
+# it's called might be skipped (such as if it is within an "if", you
+# have to call PKG_CHECK_EXISTS manually
+# --------------------------------------------------------------
+AC_DEFUN([PKG_CHECK_EXISTS],
+[AC_REQUIRE([PKG_PROG_PKG_CONFIG])dnl
+if test -n "$PKG_CONFIG" && \
+    AC_RUN_LOG([$PKG_CONFIG --exists --print-errors "$1"]); then
+  m4_default([$2], [:])
+m4_ifvaln([$3], [else
+  $3])dnl
+fi])
+
+# _PKG_CONFIG([VARIABLE], [COMMAND], [MODULES])
+# ---------------------------------------------
+m4_define([_PKG_CONFIG],
+[if test -n "$$1"; then
+    pkg_cv_[]$1="$$1"
+ elif test -n "$PKG_CONFIG"; then
+    PKG_CHECK_EXISTS([$3],
+                     [pkg_cv_[]$1=`$PKG_CONFIG --[]$2 "$3" 2>/dev/null`],
+		     [pkg_failed=yes])
+ else
+    pkg_failed=untried
+fi[]dnl
+])# _PKG_CONFIG
+
+# _PKG_SHORT_ERRORS_SUPPORTED
+# -----------------------------
+AC_DEFUN([_PKG_SHORT_ERRORS_SUPPORTED],
+[AC_REQUIRE([PKG_PROG_PKG_CONFIG])
+if $PKG_CONFIG --atleast-pkgconfig-version 0.20; then
+        _pkg_short_errors_supported=yes
+else
+        _pkg_short_errors_supported=no
+fi[]dnl
+])# _PKG_SHORT_ERRORS_SUPPORTED
+
+
+# PKG_CHECK_MODULES(VARIABLE-PREFIX, MODULES, [ACTION-IF-FOUND],
+# [ACTION-IF-NOT-FOUND])
+#
+#
+# Note that if there is a possibility the first call to
+# PKG_CHECK_MODULES might not happen, you should be sure to include an
+# explicit call to PKG_PROG_PKG_CONFIG in your configure.ac
+#
+#
+# --------------------------------------------------------------
+AC_DEFUN([PKG_CHECK_MODULES],
+[AC_REQUIRE([PKG_PROG_PKG_CONFIG])dnl
+AC_ARG_VAR([$1][_CFLAGS], [C compiler flags for $1, overriding pkg-config])dnl
+AC_ARG_VAR([$1][_LIBS], [linker flags for $1, overriding pkg-config])dnl
+
+pkg_failed=no
+AC_MSG_CHECKING([for $1])
+
+_PKG_CONFIG([$1][_CFLAGS], [cflags], [$2])
+_PKG_CONFIG([$1][_LIBS], [libs], [$2])
+
+m4_define([_PKG_TEXT], [Alternatively, you may set the environment variables $1[]_CFLAGS
+and $1[]_LIBS to avoid the need to call pkg-config.
+See the pkg-config man page for more details.])
+
+if test $pkg_failed = yes; then
+   	AC_MSG_RESULT([no])
+        _PKG_SHORT_ERRORS_SUPPORTED
+        if test $_pkg_short_errors_supported = yes; then
+	        $1[]_PKG_ERRORS=`$PKG_CONFIG --short-errors --print-errors "$2" 2>&1`
+        else 
+	        $1[]_PKG_ERRORS=`$PKG_CONFIG --print-errors "$2" 2>&1`
+        fi
+	# Put the nasty error message in config.log where it belongs
+	echo "$$1[]_PKG_ERRORS" >&AS_MESSAGE_LOG_FD
+
+	m4_default([$4], [AC_MSG_ERROR(
+[Package requirements ($2) were not met:
+
+$$1_PKG_ERRORS
+
+Consider adjusting the PKG_CONFIG_PATH environment variable if you
+installed software in a non-standard prefix.
+
+_PKG_TEXT])dnl
+        ])
+elif test $pkg_failed = untried; then
+     	AC_MSG_RESULT([no])
+	m4_default([$4], [AC_MSG_FAILURE(
+[The pkg-config script could not be found or is too old.  Make sure it
+is in your PATH or set the PKG_CONFIG environment variable to the full
+path to pkg-config.
+
+_PKG_TEXT
+
+To get pkg-config, see <http://pkg-config.freedesktop.org/>.])dnl
+        ])
+else
+	$1[]_CFLAGS=$pkg_cv_[]$1[]_CFLAGS
+	$1[]_LIBS=$pkg_cv_[]$1[]_LIBS
+        AC_MSG_RESULT([yes])
+	$3
+fi[]dnl
+])# PKG_CHECK_MODULES
 # ===========================================================================
 #         http://www.nongnu.org/autoconf-archive/check_gnu_make.html
 # ===========================================================================
diff -rupN e2fsprogs-1.42.9-orig/configure.in e2fsprogs-1.42.9/configure.in
--- e2fsprogs-1.42.9-orig/configure.in	2015-03-31 11:35:58.190812361 -0400
+++ e2fsprogs-1.42.9/configure.in	2015-03-31 11:39:49.321821933 -0400
@@ -6,6 +6,7 @@ AH_BOTTOM([#include "dirpaths.h"])
 MCONFIG=./MCONFIG
 AC_SUBST_FILE(MCONFIG)
 BINARY_TYPE=bin
+PKG_CHECK_MODULES([BVHD],[libbudgetvhd])
 dnl
 dnl This is to figure out the version number and the date....
 dnl
diff -rupN e2fsprogs-1.42.9-orig/e2fsck/Makefile.in e2fsprogs-1.42.9/e2fsck/Makefile.in
--- e2fsprogs-1.42.9-orig/e2fsck/Makefile.in	2015-03-31 11:35:58.164812360 -0400
+++ e2fsprogs-1.42.9/e2fsck/Makefile.in	2015-03-31 11:55:49.571861700 -0400
@@ -16,19 +16,19 @@ MANPAGES=	e2fsck.8
 FMANPAGES=	e2fsck.conf.5
 
 LIBS= $(LIBQUOTA) $(LIBEXT2FS) $(LIBCOM_ERR) $(LIBBLKID) $(LIBUUID) \
-	$(LIBINTL) $(LIBE2P)
+	$(LIBINTL) $(LIBE2P) @BVHD_LIBS@
 DEPLIBS= $(DEPLIBQUOTA) $(LIBEXT2FS) $(DEPLIBCOM_ERR) $(DEPLIBBLKID) \
 	 $(DEPLIBUUID) $(DEPLIBE2P)
 
 STATIC_LIBS= $(STATIC_LIBQUOTA) $(STATIC_LIBEXT2FS) $(STATIC_LIBCOM_ERR) \
-	     $(STATIC_LIBBLKID) $(STATIC_LIBUUID) $(LIBINTL) $(STATIC_LIBE2P)
+	     $(STATIC_LIBBLKID) $(STATIC_LIBUUID) $(LIBINTL) $(STATIC_LIBE2P) @BVHD_LIBS@
 STATIC_DEPLIBS= $(DEPSTATIC_LIBQUOTA) $(STATIC_LIBEXT2FS) \
 		$(DEPSTATIC_LIBCOM_ERR) $(DEPSTATIC_LIBBLKID) \
 		$(DEPSTATIC_LIBUUID) $(DEPSTATIC_LIBE2P)
 
 PROFILED_LIBS= $(PROFILED_LIBQUOTA) $(PROFILED_LIBEXT2FS) \
 	       $(PROFILED_LIBCOM_ERR) $(PROFILED_LIBBLKID) $(PROFILED_LIBUUID) \
-	       $(PROFILED_LIBE2P) $(LIBINTL)
+	       $(PROFILED_LIBE2P) $(LIBINTL) @BVHD_LIBS@
 PROFILED_DEPLIBS= $(DEPPROFILED_LIBQUOTA) $(PROFILED_LIBEXT2FS) \
 		  $(DEPPROFILED_LIBCOM_ERR) $(DEPPROFILED_LIBBLKID) \
 		  $(DEPPROFILED_LIBUUID) $(DEPPROFILED_LIBE2P)
@@ -37,7 +37,7 @@ COMPILE_ET=$(top_builddir)/lib/et/compil
 
 .c.o:
 	$(E) "	CC $<"
-	$(Q) $(CC) -c $(ALL_CFLAGS) $< -o $@
+	$(Q) $(CC) -c $(ALL_CFLAGS) @BVHD_CFLAGS@ $< -o $@
 	$(Q) $(CHECK_CMD) $(ALL_CFLAGS) $<
 @PROFILE_CMT@	$(Q) $(CC) $(ALL_CFLAGS) -g -pg -o profiled/$*.o -c $<
 
@@ -69,7 +69,7 @@ OBJS= crc32.o dict.o unix.o e2fsck.o sup
 	pass3.o pass4.o pass5.o journal.o badblocks.o util.o dirinfo.o \
 	dx_dirinfo.o ehandler.o problem.o message.o quota.o recovery.o \
 	region.o revoke.o ea_refcount.o rehash.o profile.o prof_err.o \
-	logfile.o sigcatcher.o $(MTRACE_OBJ)
+	logfile.o sigcatcher.o $(MTRACE_OBJ) ../misc/vhdio.o
 
 PROFILED_OBJS= profiled/dict.o profiled/unix.o profiled/e2fsck.o \
 	profiled/super.o profiled/pass1.o profiled/pass1b.o \
@@ -112,7 +112,8 @@ SRCS= $(srcdir)/e2fsck.c \
 	$(srcdir)/logfile.c \
 	prof_err.c \
 	$(srcdir)/quota.c \
-	$(MTRACE_SRC)
+	$(MTRACE_SRC) \
+	../misc/vhdio.c
 
 all:: profiled $(PROGS) e2fsck $(MANPAGES) $(FMANPAGES)
 
diff -rupN e2fsprogs-1.42.9-orig/e2fsck/unix.c e2fsprogs-1.42.9/e2fsck/unix.c
--- e2fsprogs-1.42.9-orig/e2fsck/unix.c	2015-03-31 11:35:58.164812360 -0400
+++ e2fsprogs-1.42.9/e2fsck/unix.c	2015-03-31 12:00:26.504873168 -0400
@@ -52,8 +52,14 @@ extern int optind;
 #include "e2fsck.h"
 #include "problem.h"
 #include "../version.h"
+#include "../misc/vhdio.h"
+
+#include <budgetvhd.h>
 
 /* Command line options */
+static int use_vhd;
+__u64 vhd_size;
+
 static int cflag;		/* check disk */
 static int show_version_only;
 static int verbose;
@@ -769,7 +775,7 @@ static errcode_t PRS(int argc, char *arg
 	else
 		ctx->program_name = "e2fsck";
 
-	while ((c = getopt (argc, argv, "panyrcC:B:dE:fvtFVM:b:I:j:P:l:L:N:SsDk")) != EOF)
+	while ((c = getopt (argc, argv, "panyrcC:B:dE:fvtFVM:b:I:j:P:l:L:N:SsDkZ")) != EOF)
 		switch (c) {
 		case 'C':
 			ctx->progress = e2fsck_update_progress;
@@ -831,6 +837,9 @@ static errcode_t PRS(int argc, char *arg
 				"supported on this version of e2fsck.\n"));
 #endif
 			break;
+		case 'Z':
+			use_vhd++;
+			break;
 		case 'c':
 			if (cflag++)
 				ctx->options |= E2F_OPT_WRITECHECK;
@@ -1241,6 +1250,12 @@ int main (int argc, char *argv[])
 				    _("need terminal for interactive repairs"));
 	}
 	ctx->superblock = ctx->use_superblock;
+	if (use_vhd) {
+		BVHD *v = bvhd_open(ctx->filesystem_name, 1);
+		vhd_size = bvhd_size(v);
+		bvhd_close(v);	
+	}
+
 
 	flags = EXT2_FLAG_SKIP_MMP;
 restart:
@@ -1250,7 +1265,7 @@ restart:
 		test_io_backing_manager = unix_io_manager;
 	} else
 #endif
-		io_ptr = unix_io_manager;
+		io_ptr = use_vhd ? vhd_io_manager : unix_io_manager;
 	flags |= EXT2_FLAG_NOFREE_ON_ERROR;
 	profile_get_boolean(ctx->profile, "options", "old_bitmaps", 0, 0,
 			    &old_bitmaps);
diff -rupN e2fsprogs-1.42.9-orig/misc/Makefile.in e2fsprogs-1.42.9/misc/Makefile.in
--- e2fsprogs-1.42.9-orig/misc/Makefile.in	2015-03-31 11:35:58.191812361 -0400
+++ e2fsprogs-1.42.9/misc/Makefile.in	2015-03-31 12:05:06.295884756 -0400
@@ -40,10 +40,10 @@ UMANPAGES=	chattr.1 lsattr.1 @UUID_CMT@
 
 LPROGS=		@E2INITRD_PROG@
 
-TUNE2FS_OBJS=	tune2fs.o util.o
+TUNE2FS_OBJS=	tune2fs.o util.o vhdio.o
 MKLPF_OBJS=	mklost+found.o
 MKE2FS_OBJS=	mke2fs.o util.o profile.o prof_err.o default_profile.o \
-			create_inode.o
+			create_inode.o vhdio.o
 CHATTR_OBJS=	chattr.o
 LSATTR_OBJS=	lsattr.o
 UUIDGEN_OBJS=	uuidgen.o
@@ -101,7 +101,7 @@ COMPILE_ET=$(top_builddir)/lib/et/compil
 
 .c.o:
 	$(E) "	CC $<"
-	$(Q) $(CC) -c $(ALL_CFLAGS) $< -o $@
+	$(Q) $(CC) -c $(ALL_CFLAGS) @BVHD_CFLAGS@ $< -o $@
 	$(Q) $(CHECK_CMD) $(ALL_CFLAGS) $<
 @PROFILE_CMT@	$(Q) $(CC) $(ALL_CFLAGS) -g -pg -o profiled/$*.o -c $<
 
@@ -160,7 +160,7 @@ tune2fs: $(TUNE2FS_OBJS) $(DEPLIBS) $(DE
 	$(E) "	LD $@"
 	$(Q) $(CC) $(ALL_LDFLAGS) -o tune2fs $(TUNE2FS_OBJS) $(LIBS) \
 		$(LIBBLKID) $(LIBUUID) $(LIBQUOTA) $(LIBEXT2FS) $(LIBS_E2P) \
-		$(LIBINTL)
+		$(LIBINTL) @BVHD_LIBS@
 
 tune2fs.static: $(TUNE2FS_OBJS) $(STATIC_DEPLIBS) $(STATIC_LIBE2P) $(DEPSTATIC_LIBBLKID)
 	$(E) "	LD $@"
@@ -237,7 +237,7 @@ mke2fs: $(MKE2FS_OBJS) $(DEPLIBS) $(LIBE
 		$(DEPLIBQUOTA) $(LIBEXT2FS)
 	$(E) "	LD $@"
 	$(Q) $(CC) $(ALL_LDFLAGS) -o mke2fs $(MKE2FS_OBJS) $(LIBS) $(LIBBLKID) \
-		$(LIBUUID) $(LIBQUOTA) $(LIBEXT2FS) $(LIBE2P) $(LIBINTL)
+		$(LIBUUID) $(LIBQUOTA) $(LIBEXT2FS) $(LIBE2P) $(LIBINTL) @BVHD_LIBS@
 
 mke2fs.static: $(MKE2FS_OBJS) $(STATIC_DEPLIBS) $(STATIC_LIBE2P) $(DEPSTATIC_LIBUUID) \
 		$(DEPSTATIC_LIBQUOTA) $(DEPSTATIC_LIBBLKID)
diff -rupN e2fsprogs-1.42.9-orig/misc/mke2fs.c e2fsprogs-1.42.9/misc/mke2fs.c
--- e2fsprogs-1.42.9-orig/misc/mke2fs.c	2015-03-31 11:35:58.192812361 -0400
+++ e2fsprogs-1.42.9/misc/mke2fs.c	2015-03-31 12:10:45.774898814 -0400
@@ -57,6 +57,9 @@ extern int optind;
 #include "quota/mkquota.h"
 #include "create_inode.h"
 
+#include <budgetvhd.h>
+#include "vhdio.h"
+
 #define STRIDE_LENGTH 8
 
 #define MAX_32_NUM ((((unsigned long long) 1) << 32) - 1)
@@ -74,6 +77,7 @@ static const char * program_name = "mke2
 static const char * device_name /* = NULL */;
 
 /* Command line options */
+static int	use_vhd;
 static int	cflag;
 static int	verbose;
 static int	quiet;
@@ -1390,7 +1394,7 @@ profile_error:
 	}
 
 	while ((c = getopt (argc, argv,
-		    "b:cg:i:jl:m:no:qr:s:t:d:vC:DE:FG:I:J:KL:M:N:O:R:ST:U:V")) != EOF) {
+		    "b:cg:i:jl:m:no:qr:s:t:d:vC:DE:FG:I:J:KL:M:N:O:R:ST:U:VZ")) != EOF) {
 		switch (c) {
 		case 'b':
 			blocksize = parse_num_blocks2(optarg, -1);
@@ -1413,6 +1417,9 @@ profile_error:
 		case 'c':	/* Check for bad blocks */
 			cflag++;
 			break;
+		case 'Z':
+			use_vhd++;
+			break;
 		case 'C':
 			cluster_size = parse_num_blocks2(optarg, -1);
 			if (cluster_size <= EXT2_MIN_CLUSTER_SIZE ||
@@ -1665,10 +1672,17 @@ profile_error:
 	if (noaction && fs_blocks_count) {
 		dev_size = fs_blocks_count;
 		retval = 0;
-	} else
-		retval = ext2fs_get_device_size2(device_name,
-						 EXT2_BLOCK_SIZE(&fs_param),
-						 &dev_size);
+	} else {
+		if (use_vhd) {
+			BVHD *v = bvhd_open(device_name, 1);
+			dev_size = bvhd_size(v) / EXT2_BLOCK_SIZE(&fs_param);
+			bvhd_close(v);	
+		} else {
+			retval = ext2fs_get_device_size2(device_name,
+ 						 EXT2_BLOCK_SIZE(&fs_param),
+ 						 &dev_size);
+		}
+	}
 
 	if (retval && (retval != EXT2_ET_UNIMPLEMENTED)) {
 		com_err(program_name, retval, "%s",
@@ -2386,7 +2400,7 @@ int main (int argc, char *argv[])
 		test_io_backing_manager = unix_io_manager;
 	} else
 #endif
-		io_ptr = unix_io_manager;
+		io_ptr = use_vhd ? vhd_io_manager : unix_io_manager;
 
 	if (should_do_undo(device_name)) {
 		retval = mke2fs_setup_tdb(device_name, &io_ptr);
diff -rupN e2fsprogs-1.42.9-orig/misc/tune2fs.c e2fsprogs-1.42.9/misc/tune2fs.c
--- e2fsprogs-1.42.9-orig/misc/tune2fs.c	2015-03-31 11:35:58.191812361 -0400
+++ e2fsprogs-1.42.9/misc/tune2fs.c	2015-03-31 12:23:16.497929904 -0400
@@ -62,6 +62,8 @@ extern int optind;
 #include "blkid/blkid.h"
 #include "quota/mkquota.h"
 
+#include "vhdio.h"
+
 #include "../version.h"
 #include "nls-enable.h"
 
@@ -99,6 +101,8 @@ static int usrquota, grpquota;
 int journal_size, journal_flags;
 char *journal_device;
 
+static int use_vhd = 0;
+
 static struct list_head blk_move_list;
 
 struct blk_move {
@@ -874,7 +878,7 @@ static void parse_tune2fs_options(int ar
 	char *tmp;
 	struct group *gr;
 	struct passwd *pw;
-	char optstring[100] = "c:e:fg:i:jlm:o:r:s:u:C:E:I:J:L:M:O:T:U:";
+	char optstring[100] = "c:e:fg:i:jlm:o:r:s:u:C:E:I:J:L:M:O:T:U:Z";
 
 #ifdef CONFIG_QUOTA
 	strcat(optstring, "Q:");
@@ -1108,6 +1112,9 @@ static void parse_tune2fs_options(int ar
 			open_flag = EXT2_FLAG_RW;
 			I_flag = 1;
 			break;
+		case 'Z':
+			use_vhd++;
+			break;
 		default:
 			usage();
 		}
@@ -1912,7 +1919,7 @@ int main(int argc, char **argv)
 		test_io_backing_manager = unix_io_manager;
 	} else
 #endif
-		io_ptr = unix_io_manager;
+		io_ptr = use_vhd ? vhd_io_manager : unix_io_manager;
 
 retry_open:
 	if ((open_flag & EXT2_FLAG_RW) == 0 || f_flag)
diff -rupN e2fsprogs-1.42.9-orig/misc/vhdio.c e2fsprogs-1.42.9/misc/vhdio.c
--- e2fsprogs-1.42.9-orig/misc/vhdio.c	1969-12-31 19:00:00.000000000 -0500
+++ e2fsprogs-1.42.9/misc/vhdio.c	2015-03-31 12:23:57.635931608 -0400
@@ -0,0 +1,477 @@
+/*
+ * vhdio_io.c --- io to a vhd 
+ */
+
+#define _XOPEN_SOURCE 600 /* for inclusion of PATH_MAX in Solaris */
+
+#include <stdio.h>
+#include <string.h>
+#include <strings.h>
+#include <fcntl.h>
+#include <ctype.h>
+#include <time.h>
+#ifdef __linux__
+#include <sys/utsname.h>
+#endif
+#ifdef HAVE_GETOPT_H
+#include <getopt.h>
+#else
+extern char *optarg;
+extern int optind;
+#endif
+#ifdef HAVE_UNISTD_H
+#include <unistd.h>
+#endif
+#ifdef HAVE_STDLIB_H
+#include <stdlib.h>
+#endif
+#ifdef HAVE_ERRNO_H
+#include <errno.h>
+#endif
+#ifdef HAVE_MNTENT_H
+#include <mntent.h>
+#endif
+#include <sys/ioctl.h>
+#include <sys/types.h>
+#include <libgen.h>
+#include <limits.h>
+
+
+#include "ext2fs/ext2_fs.h"
+#include "ext2fs/ext2fs.h"
+#include <budgetvhd.h>
+
+#include "vhdio.h"
+
+#define EXT2_ET_MAGIC_VHD_IO_CHANNEL 0x1928419a
+
+struct vhdio_private_data
+{
+  int magic;
+#if 0
+  int fd;
+#endif
+  int sectors_per_block;
+  BVHD *vhd;
+  struct struct_io_stats io_stats;
+};
+
+static struct struct_io_manager struct_vhd_manager;
+
+io_manager vhd_io_manager = &struct_vhd_manager;
+
+
+static errcode_t
+vhdio_get_stats (io_channel channel, io_stats * stats)
+{
+  struct vhdio_private_data *data;
+
+  EXT2_CHECK_MAGIC (channel, EXT2_ET_MAGIC_IO_CHANNEL);
+  data = (struct vhdio_private_data *) channel->private_data;
+  EXT2_CHECK_MAGIC (data, EXT2_ET_MAGIC_VHD_IO_CHANNEL);
+
+
+  if (stats)
+    *stats = &data->io_stats;
+
+
+  return 0;
+}
+
+static errcode_t
+vhdio_open (const char *name, int flags, io_channel * channel)
+{
+
+  io_channel io = NULL;
+  struct vhdio_private_data *data = NULL;
+  errcode_t retval;
+
+
+  do
+    {
+      retval = ext2fs_get_mem (sizeof (struct struct_io_channel), &io);
+      if (retval)
+        break;
+
+      memset (io, 0, sizeof (struct struct_io_channel));
+      io->magic = EXT2_ET_MAGIC_IO_CHANNEL;
+
+      retval = ext2fs_get_mem (sizeof (struct vhdio_private_data), &data);
+      if (retval)
+        break;
+
+      io->manager = vhd_io_manager;
+
+      retval = ext2fs_get_mem (strlen (name) + 1, &io->name);
+      if (retval)
+        break;
+
+      strcpy (io->name, name);
+      io->private_data = data;
+
+
+      io->block_size = 1024;
+      io->read_error = 0;
+      io->write_error = 0;
+      io->refcount = 1;
+
+      memset (data, 0, sizeof (struct vhdio_private_data));
+      data->magic = EXT2_ET_MAGIC_VHD_IO_CHANNEL;
+      data->io_stats.num_fields = 2;
+      data->sectors_per_block = io->block_size / 512;
+
+
+#if 0
+      data->fd = open ("../test/vhdfs", O_RDWR);
+#endif
+
+      data->vhd = bvhd_open (io->name, (flags & IO_FLAG_RW) ? 0 : 1);
+
+      if (!data->vhd)
+        break;
+
+
+      *channel = io;
+      return 0;
+    }
+  while (0);
+
+  if (data)
+    ext2fs_free_mem (&data);
+
+  if (io)
+    ext2fs_free_mem (&io);
+  return EXT2_ET_BAD_DEVICE_NAME;
+}
+
+static errcode_t
+vhdio_close (io_channel channel)
+{
+  struct vhdio_private_data *data;
+
+  EXT2_CHECK_MAGIC (channel, EXT2_ET_MAGIC_IO_CHANNEL);
+  data = (struct vhdio_private_data *) channel->private_data;
+  EXT2_CHECK_MAGIC (data, EXT2_ET_MAGIC_VHD_IO_CHANNEL);
+
+  if (--channel->refcount > 0)
+    return 0;
+
+  bvhd_close (data->vhd);
+
+  ext2fs_free_mem (&channel->private_data);
+  if (channel->name)
+    ext2fs_free_mem (&channel->name);
+  ext2fs_free_mem (&channel);
+
+  return 0;
+}
+
+static errcode_t
+vhdio_set_blksize (io_channel channel, int blksize)
+{
+  struct vhdio_private_data *data;
+
+  EXT2_CHECK_MAGIC (channel, EXT2_ET_MAGIC_IO_CHANNEL);
+  data = (struct vhdio_private_data *) channel->private_data;
+  EXT2_CHECK_MAGIC (data, EXT2_ET_MAGIC_VHD_IO_CHANNEL);
+
+  channel->block_size = blksize;
+  data->sectors_per_block = channel->block_size / 512;
+  return 0;
+}
+
+
+static errcode_t
+vhdio_read_blk64 (io_channel channel, unsigned long long block, int count,
+                  void *buf)
+{
+  struct vhdio_private_data *data;
+  int slop = 0;
+  uint64_t sector = block;
+
+  EXT2_CHECK_MAGIC (channel, EXT2_ET_MAGIC_IO_CHANNEL);
+  data = (struct vhdio_private_data *) channel->private_data;
+  EXT2_CHECK_MAGIC (data, EXT2_ET_MAGIC_VHD_IO_CHANNEL);
+
+#if 0
+  {
+    uint32_t size = (count < 0) ? -count : count * channel->block_size;
+    uint64_t location = (uint64_t) block * channel->block_size;
+    int actual;
+
+    data->io_stats.bytes_read += size;
+
+    if (lseek (data->fd, location, SEEK_SET) != location)
+      {
+        return EXT2_ET_LLSEEK_FAILED;
+      }
+    actual = read (data->fd, buf, size);
+
+    if (actual != size)
+      return EXT2_ET_SHORT_READ;
+
+
+    return 0;
+
+  }
+#endif
+
+
+  sector *= data->sectors_per_block;
+
+  if (count < 0)
+    {
+      count = -count;
+      slop = count & 0x1ff;
+      count >>= 9;
+    }
+  else
+    {
+      count *= data->sectors_per_block;
+    }
+
+  if (bvhd_read (data->vhd, buf, sector, count) != count)
+    {
+      printf ("Short read\n");
+      return EXT2_ET_SHORT_READ;
+    }
+
+  data->io_stats.bytes_read += count * 512;
+
+  if (slop)
+    {
+      char tmp[512];
+      uint8_t *ptr = buf;
+
+      ptr += count * 512;
+
+      if (bvhd_read (data->vhd, tmp, sector + count, 1) != 1)
+        return EXT2_ET_SHORT_READ;
+
+      memcpy (ptr, tmp, slop);
+      data->io_stats.bytes_read += slop;
+
+    }
+
+  return 0;
+}
+
+static errcode_t
+vhdio_read_blk (io_channel channel, unsigned long block, int count, void *buf)
+{
+  return vhdio_read_blk64 (channel, block, count, buf);
+}
+
+
+static errcode_t
+vhdio_write_blk64 (io_channel channel, unsigned long long block, int count,
+                   const void *buf)
+{
+  struct vhdio_private_data *data;
+  int ret;
+  int slop = 0;
+  uint64_t sector = block;
+
+  EXT2_CHECK_MAGIC (channel, EXT2_ET_MAGIC_IO_CHANNEL);
+  data = (struct vhdio_private_data *) channel->private_data;
+  EXT2_CHECK_MAGIC (data, EXT2_ET_MAGIC_VHD_IO_CHANNEL);
+
+#if 0
+  {
+    uint32_t size = (count < 0) ? -count : count * channel->block_size;
+    uint64_t location = (uint64_t) block * channel->block_size;
+    int actual;
+
+    data->io_stats.bytes_read += size;
+
+    if (lseek (data->fd, location, SEEK_SET) != location)
+      {
+        return EXT2_ET_LLSEEK_FAILED;
+      }
+    actual = write (data->fd, buf, size);
+
+    if (actual != size)
+      return EXT2_ET_SHORT_WRITE;
+
+
+    return 0;
+
+  }
+#endif
+
+  if (count < 0)
+    {
+      count = -count;
+      slop = count & 0x1ff;
+      count >>= 9;
+    }
+  else
+    {
+      count *= data->sectors_per_block;
+    }
+
+  sector *= data->sectors_per_block;
+
+  if ((ret = bvhd_write (data->vhd, buf, sector, count)) != count)
+    {
+      return EXT2_ET_SHORT_WRITE;
+    }
+
+  data->io_stats.bytes_written += count * 512;
+
+  if (slop)
+    {
+      char tmp[512];
+      const uint8_t *ptr = buf;
+
+      ptr += count * 512;
+
+      if (bvhd_read (data->vhd, tmp, sector + count, 1) != 1)
+        return EXT2_ET_SHORT_WRITE;
+
+      memcpy (tmp, ptr, slop);
+
+      if (bvhd_write (data->vhd, tmp, sector + count, 1) != 1)
+        return EXT2_ET_SHORT_WRITE;
+
+      data->io_stats.bytes_written += slop;
+    }
+
+
+  return 0;
+}
+
+
+static errcode_t
+vhdio_write_blk (io_channel channel, unsigned long block,
+                 int count, const void *buf)
+{
+  return vhdio_write_blk64 (channel, block, count, buf);
+}
+
+/* This is unnecessarily miserable */
+
+static errcode_t
+vhdio_write_byte (io_channel channel, unsigned long offset, int size,
+                  const void *buf)
+{
+  struct vhdio_private_data *data;
+  uint64_t location = (uint64_t) offset;
+  const uint8_t *ptr = buf;
+  uint64_t sector = offset >> 9;
+  uint32_t slop = offset & 0x1ff;
+
+  EXT2_CHECK_MAGIC (channel, EXT2_ET_MAGIC_IO_CHANNEL);
+  data = (struct vhdio_private_data *) channel->private_data;
+  EXT2_CHECK_MAGIC (data, EXT2_ET_MAGIC_VHD_IO_CHANNEL);
+
+#if 0
+  {
+    int actual;
+
+    data->io_stats.bytes_written += size;
+
+    if (lseek (data->fd, location, SEEK_SET) != location)
+      {
+        return EXT2_ET_LLSEEK_FAILED;
+      }
+    actual = write (data->fd, buf, size);
+
+    if (actual != size)
+      return EXT2_ET_SHORT_WRITE;
+
+    return 0;
+  }
+#endif
+
+
+  while (size)
+    {
+      uint32_t count = 512 - slop;
+      if (count > size)
+        count = size;
+
+      if (!slop && (count == 512))
+        {
+          if (bvhd_write (data->vhd, ptr, sector, 1) != 1)
+            {
+              return EXT2_ET_SHORT_WRITE;
+            }
+        }
+      else
+        {
+          char tmp[512];
+          if (bvhd_read (data->vhd, tmp, sector, 1) != 1)
+            {
+              return EXT2_ET_SHORT_WRITE;
+            }
+          memcpy (tmp + slop, ptr, count);
+          if (bvhd_write (data->vhd, tmp, sector, 1) != 1)
+            {
+              return EXT2_ET_SHORT_WRITE;
+            }
+        }
+
+      slop = 0;
+      sector++;
+      ptr += count;
+      size -= count;
+      data->io_stats.bytes_written += count;
+    }
+
+  return 0;
+}
+
+
+
+static errcode_t
+vhdio_flush (io_channel channel)
+{
+  struct vhdio_private_data *data;
+
+  EXT2_CHECK_MAGIC (channel, EXT2_ET_MAGIC_IO_CHANNEL);
+  data = (struct vhdio_private_data *) channel->private_data;
+  EXT2_CHECK_MAGIC (data, EXT2_ET_MAGIC_VHD_IO_CHANNEL);
+
+  bvhd_flush (data->vhd);
+
+  return 0;
+}
+
+
+static errcode_t
+vhdio_set_option (io_channel channel, const char *option, const char *arg)
+{
+  return EXT2_ET_INVALID_ARGUMENT;
+}
+
+#ifdef HAVE_DISCARD
+
+static errcode_t
+vhdio_discard (io_channel channel, unsigned long long block,
+               unsigned long long count)
+{
+  return EXT2_ET_UNIMPLEMENTED;
+}
+#endif
+
+
+static struct struct_io_manager struct_vhd_manager = {
+  EXT2_ET_MAGIC_IO_MANAGER,
+  "VHD I/O Manager",
+  vhdio_open,
+  vhdio_close,
+  vhdio_set_blksize,
+  vhdio_read_blk,
+  vhdio_write_blk,
+  vhdio_flush,
+  vhdio_write_byte,
+  vhdio_set_option,
+  vhdio_get_stats,
+  vhdio_read_blk64,
+  vhdio_write_blk64,
+#if HAVE_DISCARD
+  vhdio_discard,
+#endif
+};
+
diff -rupN e2fsprogs-1.42.9-orig/misc/vhdio.h e2fsprogs-1.42.9/misc/vhdio.h
--- e2fsprogs-1.42.9-orig/misc/vhdio.h	1969-12-31 19:00:00.000000000 -0500
+++ e2fsprogs-1.42.9/misc/vhdio.h	2015-03-31 12:26:50.905938784 -0400
@@ -0,0 +1,7 @@
+#ifndef _VHDIO_H_
+#define _VHDIO_H_
+
+/* vhdio.c */
+extern io_manager vhd_io_manager;
+
+#endif /* VHDIO_H */
