diff -uNr dbus-1.2.28.orig/configure.in dbus-1.2.28/configure.in
--- dbus-1.2.28.orig/configure.in	2012-07-20 19:55:26.600404901 +0100
+++ dbus-1.2.28/configure.in	2012-07-20 19:58:28.492543877 +0100
@@ -80,6 +80,7 @@
 AC_ARG_ENABLE(kqueue, AS_HELP_STRING([--enable-kqueue],[build with kqueue support]),enable_kqueue=$enableval,enable_kqueue=auto)
 AC_ARG_ENABLE(console-owner-file, AS_HELP_STRING([--enable-console-owner-file],[enable console owner file]),enable_console_owner_file=$enableval,enable_console_owner_file=auto)
 AC_ARG_ENABLE(userdb-cache, AS_HELP_STRING([--enable-userdb-cache],[build with userdb-cache support]),enable_userdb_cache=$enableval,enable_userdb_cache=yes)
+AC_ARG_ENABLE(v4v, AS_HELP_STRING([--enable-v4v],[build with v4v support]),enable_v4v=$enableval,enable_v4v=auto)
 
 AC_ARG_WITH(xml, AS_HELP_STRING([--with-xml=[libxml/expat]],[XML library to use (libxml may be named libxml2 on some systems)]))
 AC_ARG_WITH(init-scripts, AS_HELP_STRING([--with-init-scripts=[redhat]],[Style of init scripts to install]))
@@ -922,6 +923,22 @@
    AC_MSG_RESULT(no)
 fi
 
+# v4v checks
+if test x$enable_v4v = xno ; then
+    have_v4v=no
+else
+    AC_CHECK_HEADER(libv4v.h, have_v4v=yes, have_v4v=no)
+
+    if test x$enable_v4v = xyes -a x$have_v4v = xno; then
+        AC_MSG_ERROR(v4v support explicitly enabled but not available)
+    fi
+fi
+
+if test x$have_v4v = xyes ; then
+    AC_DEFINE(HAVE_V4V,1,[v4v support])
+fi
+
+AM_CONDITIONAL(HAVE_V4V, test x$have_v4v = xyes)
 
 if test -z "$with_dbus_default_reply_timeout" ; then
     DBUS_DEFAULT_REPLY_TIMEOUT=25000
@@ -1534,6 +1551,7 @@
         Building Doxygen docs:    ${enable_doxygen_docs}
         Building XML docs:        ${enable_xml_docs}
         Building cache support:   ${enable_userdb_cache}
+        Building v4v support:     ${enable_v4v}
         Gettext libs (empty OK):  ${INTLLIBS}
         Using XML parser:         ${with_xml}
         Init scripts style:       ${with_init_scripts}
diff -uNr dbus-1.2.28.orig/dbus/dbus-sysdeps-unix.c dbus-1.2.28/dbus/dbus-sysdeps-unix.c
--- dbus-1.2.28.orig/dbus/dbus-sysdeps-unix.c	2011-06-10 23:29:57.000000000 +0100
+++ dbus-1.2.28/dbus/dbus-sysdeps-unix.c	2012-07-20 19:55:45.196516891 +0100
@@ -75,6 +75,10 @@
 #include <bsm/adt.h>
 #endif
 
+#ifdef HAVE_V4V
+#include <libv4v.h>
+#endif
+
 #ifndef O_BINARY
 #define O_BINARY 0
 #endif
@@ -789,6 +793,10 @@
     hints.ai_family = AF_INET;
   else if (!strcmp(family, "ipv6"))
     hints.ai_family = AF_INET6;
+#ifdef HAVE_V4V
+  else if (!strcmp(family, "v4v"))
+    hints.ai_family = AF_UNSPEC;
+#endif
   else
     {
       dbus_set_error (error,
@@ -813,6 +821,11 @@
   tmp = ai;
   while (tmp)
     {
+#ifdef HAVE_V4V
+      if (family && !strcmp(family, "v4v"))
+        tmp->ai_family = PF_XENV4V;
+#endif
+
       if (!_dbus_open_socket (&fd, tmp->ai_family, SOCK_STREAM, 0, error))
         {
           freeaddrinfo(ai);
@@ -892,6 +905,10 @@
     hints.ai_family = AF_INET;
   else if (!strcmp(family, "ipv6"))
     hints.ai_family = AF_INET6;
+#ifdef HAVE_V4V
+  else if (!strcmp(family, "v4v"))
+    hints.ai_family = AF_UNSPEC;
+#endif
   else
     {
       dbus_set_error (error,
@@ -918,6 +935,12 @@
   while (tmp)
     {
       int fd = -1, *newlisten_fd;
+
+#ifdef HAVE_V4V
+      if (family && !strcmp(family, "v4v"))
+        tmp->ai_family = PF_XENV4V;
+#endif
+
       if (!_dbus_open_socket (&fd, tmp->ai_family, SOCK_STREAM, 0, error))
         {
           _DBUS_ASSERT_ERROR_IS_SET(error);
