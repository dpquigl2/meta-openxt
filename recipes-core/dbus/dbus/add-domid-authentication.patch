commit 55c67a4999e0025d561d377921f15246593db994
Author: Tomasz Wroblewski <tomasz.wroblewski@citrix.com>
Date:   Fri Oct 8 11:43:45 2010 +0100

    add DOMID authentication mechanism and GetConnectionDOMID driver function

diff --git a/bus/driver.c b/bus/driver.c
index 5e8a7a2..0bc040b 100644
--- a/bus/driver.c
+++ b/bus/driver.c
@@ -1328,6 +1328,80 @@ bus_driver_handle_get_connection_unix_user (DBusConnection *connection,
 }
 
 static dbus_bool_t
+bus_driver_handle_get_connection_domid (DBusConnection *connection,
+                                        BusTransaction *transaction,
+                                        DBusMessage    *message,
+                                        DBusError      *error)
+{
+  const char *service;
+  DBusString str;
+  BusRegistry *registry;
+  BusService *serv;
+  DBusConnection *conn;
+  DBusMessage *reply;
+  dbus_int32_t domid;
+
+  _DBUS_ASSERT_ERROR_IS_CLEAR (error);
+
+  registry = bus_connection_get_registry (connection);
+
+  service = NULL;
+  reply = NULL;
+
+  if (! dbus_message_get_args (message, error,
+			       DBUS_TYPE_STRING, &service,
+			       DBUS_TYPE_INVALID))
+      goto failed;
+
+  _dbus_verbose ("asked for DOMID of connection %s\n", service);
+
+  _dbus_string_init_const (&str, service);
+  serv = bus_registry_lookup (registry, &str);
+  if (serv == NULL)
+    {
+      dbus_set_error (error, 
+		      DBUS_ERROR_NAME_HAS_NO_OWNER,
+		      "Could not get DOMID of name '%s': no such name", service);
+      goto failed;
+    }
+
+  conn = bus_service_get_primary_owners_connection (serv);
+
+  reply = dbus_message_new_method_return (message);
+  if (reply == NULL)
+    goto oom;
+
+  if (!dbus_connection_get_domid (conn, &domid))
+    {
+      dbus_set_error (error,
+                      DBUS_ERROR_FAILED,
+                      "Could not determine DOMID for '%s'", service);
+      goto failed;
+    }
+
+  if (! dbus_message_append_args (reply,
+                                  DBUS_TYPE_INT32, &domid,
+                                  DBUS_TYPE_INVALID))
+    goto oom;
+
+  if (! bus_transaction_send_from_driver (transaction, connection, reply))
+    goto oom;
+
+  dbus_message_unref (reply);
+
+  return TRUE;
+
+ oom:
+  BUS_SET_OOM (error);
+
+ failed:
+  _DBUS_ASSERT_ERROR_IS_SET (error);
+  if (reply)
+    dbus_message_unref (reply);
+  return FALSE;
+}
+
+static dbus_bool_t
 bus_driver_handle_get_connection_unix_process_id (DBusConnection *connection,
 						  BusTransaction *transaction,
 						  DBusMessage    *message,
@@ -1713,6 +1787,10 @@ static struct
     DBUS_TYPE_STRING_AS_STRING,
     DBUS_TYPE_UINT32_AS_STRING,
     bus_driver_handle_get_connection_unix_process_id },
+  { "GetConnectionDOMID",
+    DBUS_TYPE_STRING_AS_STRING,
+    DBUS_TYPE_INT32_AS_STRING,
+    bus_driver_handle_get_connection_domid },
   { "GetAdtAuditSessionData",
     DBUS_TYPE_STRING_AS_STRING,
     DBUS_TYPE_ARRAY_AS_STRING DBUS_TYPE_BYTE_AS_STRING,
diff --git a/dbus/dbus-auth.c b/dbus/dbus-auth.c
index b81c7f2..811b5f9 100644
--- a/dbus/dbus-auth.c
+++ b/dbus/dbus-auth.c
@@ -1079,10 +1079,15 @@ handle_server_data_external_mech (DBusAuth         *auth,
                      _dbus_string_get_const_data (&auth->identity));
       return send_rejected (auth);
     }
-  
+
   if (_dbus_credentials_are_superset (auth->credentials,
                                       auth->desired_identity))
     {
+      /* Assume connections authorised using EXTERNAL mechanism are coming from dom0 */
+      if ( !_dbus_credentials_add_domid( auth->desired_identity, 0 )) {
+        return send_rejected (auth);
+      }
+  
       /* client has authenticated */
       if (!_dbus_credentials_add_credentials (auth->authorized_identity,
                                               auth->desired_identity))
@@ -1170,6 +1175,146 @@ handle_client_shutdown_external_mech (DBusAuth *auth)
 }
 
 /*
+ * DOMID mechanism. Authenticate as domain of given domid.
+ */
+
+static dbus_bool_t
+handle_server_data_domid_mech (DBusAuth         *auth,
+                               const DBusString *data)
+{
+  if (_dbus_credentials_are_anonymous (auth->credentials))
+    {
+      _dbus_verbose ("%s: no credentials, mechanism DOMID can't authenticate\n",
+                     DBUS_AUTH_NAME (auth));
+      return send_rejected (auth);
+    }
+  
+  if (_dbus_string_get_length (data) > 0)
+    {
+      if (_dbus_string_get_length (&auth->identity) > 0)
+        {
+          /* Tried to send two auth identities, wtf */
+          _dbus_verbose ("%s: client tried to send auth identity, but we already have one\n",
+                         DBUS_AUTH_NAME (auth));
+          return send_rejected (auth);
+        }
+      else
+        {
+          /* this is our auth identity */
+          if (!_dbus_string_copy (data, 0, &auth->identity, 0))
+            return FALSE;
+        }
+    }
+
+  /* Poke client for an auth identity, if none given */
+  if (_dbus_string_get_length (&auth->identity) == 0 &&
+      !auth->already_asked_for_initial_response)
+    {
+      if (send_data (auth, NULL))
+        {
+          _dbus_verbose ("%s: sending empty challenge asking client for auth identity\n",
+                         DBUS_AUTH_NAME (auth));
+          auth->already_asked_for_initial_response = TRUE;
+          goto_state (auth, &server_state_waiting_for_data);
+          return TRUE;
+        }
+      else
+        return FALSE;
+    }
+
+  _dbus_credentials_clear (auth->desired_identity);
+  
+  if (_dbus_string_get_length (&auth->identity) == 0) {
+    return send_rejected (auth);
+  } else {
+    int end;
+    long domid;
+    if ( !_dbus_string_parse_int( &auth->identity, 0, &domid, &end ) ) {
+      return send_rejected (auth);
+    }
+    if ( !_dbus_credentials_add_unix_uid( auth->desired_identity, 0 )) {
+      return send_rejected (auth);
+    }
+    if ( !_dbus_credentials_add_domid( auth->desired_identity, domid )) {
+      return send_rejected (auth);
+    }
+  }
+
+  /* client has authenticated */
+  if (!_dbus_credentials_add_credentials (auth->authorized_identity,
+                                          auth->desired_identity))
+    return FALSE;
+
+  /* also copy process ID from the socket credentials
+   */
+  if (!_dbus_credentials_add_credential (auth->authorized_identity,
+                                         DBUS_CREDENTIAL_UNIX_PROCESS_ID,
+                                         auth->credentials))
+    return FALSE;
+    
+  /* also copy audit data from the socket credentials
+   */
+  if (!_dbus_credentials_add_credential (auth->authorized_identity,
+                                         DBUS_CREDENTIAL_ADT_AUDIT_DATA_ID,
+                                         auth->credentials))
+    return FALSE;
+    
+  if (!send_ok (auth))
+    return FALSE;
+    
+  _dbus_verbose ("%s: authenticated client based on socket credentials\n",
+                 DBUS_AUTH_NAME (auth));
+    
+  return TRUE;
+}
+
+static void
+handle_server_shutdown_domid_mech (DBusAuth *auth)
+{
+
+}
+
+static dbus_bool_t
+handle_client_initial_response_domid_mech (DBusAuth         *auth,
+                                              DBusString       *response)
+{
+  DBusString plaintext;
+
+  if (!_dbus_string_init (&plaintext))
+    return FALSE;
+
+  if (!_dbus_append_user_from_current_process (&plaintext))
+    goto failed;
+
+  if (!_dbus_string_hex_encode (&plaintext, 0,
+				response,
+				_dbus_string_get_length (response)))
+    goto failed;
+
+  _dbus_string_free (&plaintext);
+  
+  return TRUE;
+
+ failed:
+  _dbus_string_free (&plaintext);
+  return FALSE;  
+}
+
+static dbus_bool_t
+handle_client_data_domid_mech (DBusAuth         *auth,
+                               const DBusString *data)
+{
+  return TRUE;
+}
+
+static void
+handle_client_shutdown_domid_mech (DBusAuth *auth)
+{
+
+}
+
+
+/*
  * ANONYMOUS mechanism
  */
 
@@ -1302,6 +1447,14 @@ all_mechanisms[] = {
     handle_client_data_external_mech,
     NULL, NULL,
     handle_client_shutdown_external_mech },
+  { "DOMID",
+    handle_server_data_domid_mech,
+    NULL, NULL,
+    handle_server_shutdown_domid_mech,
+    handle_client_initial_response_domid_mech,
+    handle_client_data_domid_mech,
+    NULL, NULL,
+    handle_client_shutdown_domid_mech },
   { "DBUS_COOKIE_SHA1",
     handle_server_data_cookie_sha1_mech,
     NULL, NULL,
diff --git a/dbus/dbus-bus.c b/dbus/dbus-bus.c
index 92ec20e..3f3e00d 100644
--- a/dbus/dbus-bus.c
+++ b/dbus/dbus-bus.c
@@ -917,6 +917,71 @@ dbus_bus_get_unix_user (DBusConnection *connection,
   return (unsigned long) uid;
 }
 
+dbus_int32_t
+dbus_bus_get_domid (DBusConnection *connection,
+                    const char     *name,
+                    DBusError      *error)
+{
+  DBusMessage *message, *reply;
+  dbus_uint32_t domid;
+
+  _dbus_return_val_if_fail (connection != NULL, DBUS_DOMID_UNSET);
+  _dbus_return_val_if_fail (name != NULL, DBUS_DOMID_UNSET);
+  _dbus_return_val_if_fail (_dbus_check_is_valid_bus_name (name), DBUS_DOMID_UNSET);
+  _dbus_return_val_if_error_is_set (error, DBUS_DOMID_UNSET);
+  
+  message = dbus_message_new_method_call (DBUS_SERVICE_DBUS,
+                                          DBUS_PATH_DBUS,
+                                          DBUS_INTERFACE_DBUS,
+                                          "GetConnectionDOMID");
+
+  if (message == NULL)
+    {
+      _DBUS_SET_OOM (error);
+      return DBUS_DOMID_UNSET;
+    }
+ 
+  if (!dbus_message_append_args (message,
+				 DBUS_TYPE_STRING, &name,
+				 DBUS_TYPE_INVALID))
+    {
+      dbus_message_unref (message);
+      _DBUS_SET_OOM (error);
+      return DBUS_DOMID_UNSET;
+    }
+  
+  reply = dbus_connection_send_with_reply_and_block (connection, message, -1,
+                                                     error);
+  
+  dbus_message_unref (message);
+  
+  if (reply == NULL)
+    {
+      _DBUS_ASSERT_ERROR_IS_SET (error);
+      return DBUS_DOMID_UNSET;
+    }  
+
+  if (dbus_set_error_from_message (error, reply))
+    {
+      _DBUS_ASSERT_ERROR_IS_SET (error);
+      dbus_message_unref (reply);
+      return DBUS_DOMID_UNSET;
+    }
+  
+  if (!dbus_message_get_args (reply, error,
+                              DBUS_TYPE_INT32, &domid,
+                              DBUS_TYPE_INVALID))
+    {
+      _DBUS_ASSERT_ERROR_IS_SET (error);
+      dbus_message_unref (reply);
+      return DBUS_DOMID_UNSET;
+    }
+
+  dbus_message_unref (reply);
+  
+  return (dbus_int32_t) domid;
+}
+
 /**
  * Asks the bus to return its globally unique ID, as described in the
  * D-Bus specification. For the session bus, this is useful as a way
diff --git a/dbus/dbus-bus.h b/dbus/dbus-bus.h
index e36449c..be44ce1 100644
--- a/dbus/dbus-bus.h
+++ b/dbus/dbus-bus.h
@@ -49,6 +49,9 @@ const char*     dbus_bus_get_unique_name  (DBusConnection *connection);
 unsigned long   dbus_bus_get_unix_user    (DBusConnection *connection,
 			                   const char     *name,
                                            DBusError      *error);
+dbus_int32_t    dbus_bus_get_domid        (DBusConnection *connection,
+                                           const char *name,
+                                           DBusError *error);
 char*           dbus_bus_get_id           (DBusConnection *connection,
                                            DBusError      *error);
 int             dbus_bus_request_name     (DBusConnection *connection,
diff --git a/dbus/dbus-connection.c b/dbus/dbus-connection.c
index 9526d3c..7256b52 100644
--- a/dbus/dbus-connection.c
+++ b/dbus/dbus-connection.c
@@ -4994,6 +4994,26 @@ dbus_connection_get_unix_user (DBusConnection *connection,
   return result;
 }
 
+dbus_bool_t  dbus_connection_get_domid(DBusConnection *connection, dbus_int32_t *domid)
+{
+  dbus_bool_t result;
+
+  _dbus_return_val_if_fail (connection != NULL, FALSE);
+  _dbus_return_val_if_fail (domid != NULL, FALSE);
+  
+  CONNECTION_LOCK (connection);
+
+  if (!_dbus_transport_get_is_authenticated (connection->transport))
+    result = FALSE;
+  else
+    result = _dbus_transport_get_domid(connection->transport, domid);
+  
+  CONNECTION_UNLOCK (connection);
+
+  return result;
+}
+
+
 /**
  * Gets the process ID of the connection if any.
  * Returns #TRUE if the pid is filled in.
diff --git a/dbus/dbus-connection.h b/dbus/dbus-connection.h
index 29a2f5e..0f7e0e0 100644
--- a/dbus/dbus-connection.h
+++ b/dbus/dbus-connection.h
@@ -229,6 +229,8 @@ void               dbus_connection_set_dispatch_status_function (DBusConnection
                                                                  DBusFreeFunction            free_data_function);
 dbus_bool_t        dbus_connection_get_unix_user                (DBusConnection             *connection,
                                                                  unsigned long              *uid);
+dbus_bool_t        dbus_connection_get_domid                    (DBusConnection             *connection,
+                                                                 dbus_int32_t               *domid);
 dbus_bool_t        dbus_connection_get_unix_process_id          (DBusConnection             *connection,
                                                                  unsigned long              *pid);
 dbus_bool_t        dbus_connection_get_adt_audit_session_data   (DBusConnection             *connection,
diff --git a/dbus/dbus-credentials.c b/dbus/dbus-credentials.c
index ff69f3b..a1fca8d 100644
--- a/dbus/dbus-credentials.c
+++ b/dbus/dbus-credentials.c
@@ -49,6 +49,7 @@ struct DBusCredentials {
   int refcount;
   dbus_uid_t unix_uid;
   dbus_pid_t unix_pid;
+  dbus_int32_t domid;
   char *windows_sid;
   void *adt_audit_data;
   dbus_int32_t adt_audit_data_size;
@@ -78,6 +79,7 @@ _dbus_credentials_new (void)
   creds->refcount = 1;
   creds->unix_uid = DBUS_UID_UNSET;
   creds->unix_pid = DBUS_PID_UNSET;
+  creds->domid = DBUS_DOMID_UNSET;
   creds->windows_sid = NULL;
   creds->adt_audit_data = NULL;
   creds->adt_audit_data_size = 0;
@@ -85,6 +87,18 @@ _dbus_credentials_new (void)
   return creds;
 }
 
+dbus_bool_t _dbus_credentials_add_domid(DBusCredentials *credentials, dbus_int32_t domid)
+{
+  credentials->domid = domid;
+  return TRUE;
+}
+
+dbus_int32_t _dbus_credentials_get_domid(DBusCredentials *credentials)
+{
+  return credentials->domid;
+}
+
+
 /**
  * Creates a new object with credentials (user ID and process ID) from the current process.
  * @returns the new object or #NULL if no memory
@@ -238,6 +252,8 @@ _dbus_credentials_include (DBusCredentials    *credentials,
       return credentials->windows_sid != NULL;
     case DBUS_CREDENTIAL_ADT_AUDIT_DATA_ID:
       return credentials->adt_audit_data != NULL;
+    case DBUS_CREDENTIAL_DOMID:
+      return credentials->domid != DBUS_DOMID_UNSET;
     }
 
   _dbus_assert_not_reached ("Unknown credential enum value");
@@ -324,6 +340,8 @@ _dbus_credentials_are_superset (DBusCredentials    *credentials,
   return
     (possible_subset->unix_pid == DBUS_PID_UNSET ||
      possible_subset->unix_pid == credentials->unix_pid) &&
+    (possible_subset->domid == DBUS_DOMID_UNSET ||
+     possible_subset->domid == credentials->domid) &&
     (possible_subset->unix_uid == DBUS_UID_UNSET ||
      possible_subset->unix_uid == credentials->unix_uid) &&
     (possible_subset->windows_sid == NULL ||
@@ -348,7 +366,8 @@ _dbus_credentials_are_empty (DBusCredentials    *credentials)
     credentials->unix_pid == DBUS_PID_UNSET &&
     credentials->unix_uid == DBUS_UID_UNSET &&
     credentials->windows_sid == NULL &&
-    credentials->adt_audit_data == NULL;
+    credentials->adt_audit_data == NULL &&
+    credentials->domid == DBUS_DOMID_UNSET;
 }
 
 /**
@@ -389,6 +408,9 @@ _dbus_credentials_add_credentials (DBusCredentials    *credentials,
                                       other_credentials) &&
     _dbus_credentials_add_credential (credentials,
                                       DBUS_CREDENTIAL_WINDOWS_SID,
+                                      other_credentials) &&
+    _dbus_credentials_add_credential (credentials,
+                                      DBUS_CREDENTIAL_DOMID,
                                       other_credentials);
 }
 
@@ -433,6 +455,12 @@ _dbus_credentials_add_credential (DBusCredentials    *credentials,
       if (!_dbus_credentials_add_adt_audit_data (credentials, other_credentials->adt_audit_data, other_credentials->adt_audit_data_size))
         return FALSE;
     }
+  else if (which == DBUS_CREDENTIAL_DOMID &&
+           other_credentials->domid != DBUS_DOMID_UNSET)
+    {
+      if (!_dbus_credentials_add_domid (credentials, other_credentials->domid))
+        return FALSE;
+    }
 
   return TRUE;
 }
@@ -447,6 +475,7 @@ _dbus_credentials_clear (DBusCredentials    *credentials)
 {
   credentials->unix_pid = DBUS_PID_UNSET;
   credentials->unix_uid = DBUS_UID_UNSET;
+  credentials->domid = DBUS_DOMID_UNSET;
   dbus_free (credentials->windows_sid);
   credentials->windows_sid = NULL;
   dbus_free (credentials->adt_audit_data);
@@ -548,3 +577,4 @@ oom:
 /** @} */
 
 /* tests in dbus-credentials-util.c */
+
diff --git a/dbus/dbus-credentials.h b/dbus/dbus-credentials.h
index ef6124f..d7283ce 100644
--- a/dbus/dbus-credentials.h
+++ b/dbus/dbus-credentials.h
@@ -34,7 +34,8 @@ typedef enum {
   DBUS_CREDENTIAL_UNIX_PROCESS_ID,
   DBUS_CREDENTIAL_UNIX_USER_ID,
   DBUS_CREDENTIAL_ADT_AUDIT_DATA_ID,
-  DBUS_CREDENTIAL_WINDOWS_SID
+  DBUS_CREDENTIAL_WINDOWS_SID,
+  DBUS_CREDENTIAL_DOMID
 } DBusCredentialType;
 
 DBusCredentials* _dbus_credentials_new_from_current_process (void);
@@ -45,6 +46,8 @@ dbus_bool_t      _dbus_credentials_add_unix_pid             (DBusCredentials
                                                              dbus_pid_t          pid);
 dbus_bool_t      _dbus_credentials_add_unix_uid             (DBusCredentials    *credentials,
                                                              dbus_uid_t          uid);
+dbus_bool_t      _dbus_credentials_add_domid                (DBusCredentials    *credentials,
+                                                             dbus_int32_t        domid);
 dbus_bool_t      _dbus_credentials_add_windows_sid          (DBusCredentials    *credentials,
                                                              const char         *windows_sid);
 dbus_bool_t      _dbus_credentials_add_adt_audit_data       (DBusCredentials    *credentials,
@@ -54,6 +57,7 @@ dbus_bool_t      _dbus_credentials_include                  (DBusCredentials
                                                              DBusCredentialType  type);
 dbus_pid_t       _dbus_credentials_get_unix_pid             (DBusCredentials    *credentials);
 dbus_uid_t       _dbus_credentials_get_unix_uid             (DBusCredentials    *credentials);
+dbus_int32_t     _dbus_credentials_get_domid                (DBusCredentials    *credentials);
 const char*      _dbus_credentials_get_windows_sid          (DBusCredentials    *credentials);
 void *           _dbus_credentials_get_adt_audit_data       (DBusCredentials    *credentials);
 dbus_int32_t     _dbus_credentials_get_adt_audit_data_size  (DBusCredentials    *credentials);
diff --git a/dbus/dbus-sysdeps.h b/dbus/dbus-sysdeps.h
index 7817e04..39cd26e 100644
--- a/dbus/dbus-sysdeps.h
+++ b/dbus/dbus-sysdeps.h
@@ -117,6 +117,8 @@ typedef unsigned long dbus_gid_t;
 /** an invalid GID used to represent an uninitialized dbus_gid_t field */
 #define DBUS_GID_UNSET ((dbus_gid_t) -1)
 
+#define DBUS_DOMID_UNSET ((dbus_int32_t) 0xFFFFFFFF)
+
 /** an appropriate printf format for dbus_pid_t */
 #define DBUS_PID_FORMAT "%lu"
 /** an appropriate printf format for dbus_uid_t */
diff --git a/dbus/dbus-transport.c b/dbus/dbus-transport.c
index 53289ad..30ad5ff 100644
--- a/dbus/dbus-transport.c
+++ b/dbus/dbus-transport.c
@@ -1228,6 +1228,30 @@ _dbus_transport_get_unix_user (DBusTransport *transport,
     return FALSE;
 }
 
+dbus_bool_t _dbus_transport_get_domid(DBusTransport *transport, dbus_int32_t *domid)
+{
+  DBusCredentials *auth_identity;
+
+  *domid = DBUS_DOMID_UNSET;
+  
+  if (!transport->authenticated) {
+    return FALSE;
+  }
+  
+  auth_identity = _dbus_auth_get_identity (transport->auth);
+
+  if (_dbus_credentials_include (auth_identity,
+                                 DBUS_CREDENTIAL_DOMID))
+    {
+      *domid = _dbus_credentials_get_domid (auth_identity);
+      return TRUE;
+    }
+  else {
+    return FALSE;
+  }
+}
+
+
 /**
  * See dbus_connection_get_unix_process_id().
  *
diff --git a/dbus/dbus-transport.h b/dbus/dbus-transport.h
index f2915f3..2253a4f 100644
--- a/dbus/dbus-transport.h
+++ b/dbus/dbus-transport.h
@@ -62,6 +62,8 @@ dbus_bool_t        _dbus_transport_get_socket_fd          (DBusTransport
                                                            int                        *fd_p);
 dbus_bool_t        _dbus_transport_get_unix_user          (DBusTransport              *transport,
                                                            unsigned long              *uid);
+dbus_bool_t        _dbus_transport_get_domid              (DBusTransport              *transport,
+                                                           dbus_int32_t               *domid);
 dbus_bool_t        _dbus_transport_get_unix_process_id     (DBusTransport              *transport,
                                                            unsigned long              *pid);
 dbus_bool_t        _dbus_transport_get_adt_audit_session_data (DBusTransport              *transport,
